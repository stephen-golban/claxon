---
description: 
globs: 
alwaysApply: true
---
# Development Guidelines

## 🎯 Code Quality Standards

### Backend ([backend/](mdc:backend))
- **Linting**: Biome for code formatting and linting
- **Commands**: 
  - `bun run lint` - Lint and auto-fix
  - `bun run format` - Format code
  - `bun run check` - Combined lint + format
- **Config**: [backend/biome.json](mdc:backend/biome.json)

### Mobile App ([mobile-app/](mdc:mobile-app))
- **Linting**: Biome for TypeScript/JavaScript
- **Config**: [mobile-app/biome.json](mdc:mobile-app/biome.json)
- **Styling**: TailwindCSS with consistent class usage

## 🏗️ Architecture Patterns

### NestJS Backend Patterns
- **Modules**: Feature-based module organization
- **Controllers**: Thin controllers, business logic in services
- **DTOs**: Zod schemas for validation
- **Guards**: Authentication and authorization
- **Interceptors**: Response transformation and logging

### React Native Patterns
- **Components**: Functional components with hooks
- **State**: Zustand for global state, local state with useState
- **Forms**: React Hook Form + Zod validation
- **API**: Custom hooks for data fetching
- **Navigation**: Expo Router with typed routes

## 📝 Naming Conventions

### Files and Directories
- **Components**: PascalCase for component files (`UserProfile.tsx`)
- **Hooks**: camelCase with `use` prefix (`useUserProfile.ts`)
- **Utilities**: camelCase (`formatDate.ts`)
- **Constants**: UPPER_SNAKE_CASE (`API_ENDPOINTS.ts`)
- **Types**: PascalCase (`UserProfile.types.ts`)

### Code Conventions
- **Variables**: camelCase (`userName`, `isLoading`)
- **Functions**: camelCase (`getUserProfile`, `handleSubmit`)
- **Classes**: PascalCase (`UserService`, `AuthGuard`)
- **Interfaces**: PascalCase with `I` prefix (`IUserRepository`)
- **Types**: PascalCase (`UserProfile`, `ApiResponse`)

## 🗃️ Database Guidelines

### Schema Design ([mobile-app/src/db/schema.ts](mdc:mobile-app/src/db/schema.ts))
- **Primary Keys**: Use UUIDs for all entities
- **Foreign Keys**: Proper cascade deletion setup
- **Indexes**: Add indexes for frequently queried fields
- **Timestamps**: Always include `createdAt` and `updatedAt`
- **Soft Deletes**: Use `isActive` boolean instead of hard deletes

### Query Patterns
- **Relations**: Use Drizzle's `with` for eager loading
- **Pagination**: Implement cursor-based pagination for large datasets
- **Filtering**: Use proper WHERE clauses with indexes
- **Transactions**: Wrap multi-table operations in transactions

## 🔐 Security Best Practices

### Authentication
- **Clerk Integration**: Use Clerk for all authentication
- **Token Validation**: Always validate JWT tokens server-side
- **Authorization**: Implement role-based access control
- **Session Management**: Proper session handling and cleanup

### Data Protection
- **Input Validation**: Validate all inputs with Zod schemas
- **SQL Injection**: Use parameterized queries (Drizzle handles this)
- **XSS Prevention**: Sanitize user inputs
- **Rate Limiting**: Implement rate limiting on API endpoints

## 📱 Mobile App Guidelines

### Component Structure
```typescript
// Component file structure
interface Props {
  // Type all props
}

export function ComponentName({ prop1, prop2 }: Props) {
  // Hooks at the top
  const [state, setState] = useState();
  const { data } = useQuery();
  
  // Event handlers
  const handleEvent = useCallback(() => {
    // Handler logic
  }, [dependencies]);
  
  // Early returns for loading/error states
  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorScreen />;
  
  // Main render
  return (
    <View>
      {/* Component JSX */}
    </View>
  );
}
```

### Form Handling
- **Validation**: Always use Zod schemas
- **Error Handling**: Display field-specific errors
- **Loading States**: Show loading during submission
- **Success Feedback**: Provide user feedback on success

### API Integration
- **Custom Hooks**: Create reusable API hooks
- **Error Handling**: Consistent error handling patterns
- **Loading States**: Manage loading states properly
- **Caching**: Implement appropriate caching strategies

## 🧪 Testing Strategy

### Backend Testing
- **Unit Tests**: Test services and utilities
- **Integration Tests**: Test controllers with database
- **E2E Tests**: Test complete API workflows
- **Mocking**: Mock external dependencies

### Mobile App Testing
- **Component Tests**: Test component rendering and interactions
- **Hook Tests**: Test custom hooks in isolation
- **Integration Tests**: Test screen flows
- **E2E Tests**: Test complete user journeys

## 🚀 Performance Guidelines

### Backend Performance
- **Database**: Optimize queries with proper indexes
- **Caching**: Implement Redis caching for frequent queries
- **Pagination**: Use cursor-based pagination
- **Compression**: Enable gzip compression

### Mobile App Performance
- **Images**: Use Expo Image for optimized image handling
- **Lists**: Use FlatList for large datasets
- **Lazy Loading**: Load screens and components lazily
- **Bundle Size**: Monitor and optimize bundle size

## 🔄 Git Workflow

### Branch Naming
- `feature/feature-name` - New features
- `fix/bug-description` - Bug fixes
- `refactor/component-name` - Code refactoring
- `docs/update-readme` - Documentation updates

### Commit Messages
- Use conventional commits format
- `feat: add user profile management`
- `fix: resolve authentication redirect issue`
- `refactor: improve database query performance`
- `docs: update API documentation`

### Pull Requests
- **Title**: Clear, descriptive title
- **Description**: Explain what and why
- **Testing**: Include testing instructions
- **Screenshots**: For UI changes
- **Breaking Changes**: Clearly document breaking changes

## 📦 Dependency Management

### Backend Dependencies
- **Production**: Keep production dependencies minimal
- **Development**: Use dev dependencies for tools
- **Updates**: Regular security updates
- **Audit**: Run security audits regularly

### Mobile App Dependencies
- **Expo**: Use Expo SDK compatible versions
- **Native**: Minimize native dependencies
- **Bundle Impact**: Consider bundle size impact
- **Compatibility**: Ensure iOS/Android compatibility
