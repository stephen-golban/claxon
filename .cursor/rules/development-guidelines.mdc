---
description: 
globs: 
alwaysApply: true
---
# üõ†Ô∏è Claxon Development Guidelines

## Core Principles
- **Privacy First**: No contact info sharing, template-based messaging only
- **Speed & Simplicity**: Fast license plate lookup and messaging
- **Multi-language Support**: Romanian, Russian, English support
- **Moldova-Specific**: License plate formats and regional considerations

## Development Standards

### TypeScript Usage
- All files must use TypeScript with proper typing
- Database types defined in [src/typings/database.ts](mdc:src/typings/database.ts)
- Vehicle types in [src/typings/vehicle.ts](mdc:src/typings/vehicle.ts)
- Validation schemas using Zod in `schema.ts` files

### Form Handling
- Use React Hook Form for all forms
- Validation schemas with Zod
- Form components in [src/components/form-elements/](mdc:src/components/form-elements)
- Pattern: Base component + Controller wrapper

### Styling Guidelines
- Use NativeWind (Tailwind CSS for React Native)
- Consistent theme defined in [src/lib/constants/theme.ts](mdc:src/lib/constants/theme.ts)
- Dark/light mode support via [src/hooks/use-color-scheme.ts](mdc:src/hooks/use-color-scheme.ts)
- UI components in [src/components/ui/](mdc:src/components/ui)

### State Management
- Zustand for global state ([src/stores/](mdc:src/stores))
- TanStack Query for server state ([src/providers/tanstack.tsx](mdc:src/providers/tanstack.tsx))
- Local state with React hooks

### API Integration
- Supabase client in [src/services/api/client.ts](mdc:src/services/api/client.ts)
- API functions organized by domain (auth, accounts, etc.)
- Error handling with translated messages

### License Plate System
- Moldova-specific plate formats and validation
- Visual plate picker component in [src/components/common/license-plate-picker/](mdc:src/components/common/license-plate-picker)
- Plate images in [assets/images/plates/](mdc:assets/images/plates)
- Support for different vehicle types and special plates

### Internationalization
- Translation files in [src/translations/locales/](mdc:src/translations/locales)
- Hook: [src/hooks/use-translation.ts](mdc:src/hooks/use-translation.ts)
- Support for Romanian (ro), Russian (ru), and English (en)

### Authentication Flow
- Phone-based authentication via Clerk
- Protected routes with auth guards
- Post-auth profile completion flow
- Session management in providers

### Push Notifications
- Expo push notifications for claxon alerts
- Notification preferences in account settings
- Integration with inbox functionality

## File Naming Conventions
- Components: PascalCase (`MyComponent.tsx`)
- Hooks: camelCase starting with `use` (`useMyHook.ts`)
- Utilities: camelCase (`myUtility.ts`)
- Constants: SCREAMING_SNAKE_CASE
- Schemas: `schema.ts` for validation schemas

## Component Structure
```typescript
// Component file structure
export default function ComponentName() {
  // 1. Hooks and state
  // 2. Event handlers
  // 3. Effects
  // 4. Render logic
}
```

## Error Handling
- Use error boundaries for React errors
- Translated error messages via [src/hooks/use-error-message-translation.ts](mdc:src/hooks/use-error-message-translation.ts)
- Consistent error UI components
