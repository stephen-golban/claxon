---
description: 
globs: 
alwaysApply: true
---
# Mobile App Structure Guide

## üì± App Directory ([mobile-app/app/](mdc:mobile-app/app))
Uses Expo Router for file-based routing:

### Authentication Routes
- **Unprotected**: [mobile-app/app/(unprotected)/](mdc:mobile-app/app/(unprotected)/)
  - [sign-in.tsx](mdc:mobile-app/app/(unprotected)/sign-in.tsx) - Phone-based login
  - [sign-up.tsx](mdc:mobile-app/app/(unprotected)/sign-up.tsx) - User registration
- **Protected**: [mobile-app/app/(protected)/](mdc:mobile-app/app/(protected)/)
  - Tab-based navigation with 4 main screens

### API Routes (üöß TO BE MIGRATED)
- [mobile-app/app/api/](mdc:mobile-app/app/api) - Current backend logic
- **Status**: Being migrated to [backend/src/](mdc:backend/src)

## üß© Component Architecture ([mobile-app/src/components/](mdc:mobile-app/src/components))

### Common Components ([mobile-app/src/components/common/](mdc:mobile-app/src/components/common))
- **Container**: Layout wrapper with top text
- **Headers**: Different header styles (onboarding, protected, unprotected)
- **Empty State**: Consistent empty state component
- **Error Screen**: Error handling UI
- **Loading Spinner**: Loading states
- **License Plate Picker**: Complex plate selection component
- **Profile Avatar**: User avatar with loading skeleton
- **Tab Bar**: Custom tab navigation

### Form Elements ([mobile-app/src/components/form-elements/](mdc:mobile-app/src/components/form-elements))
All form components follow the pattern:
- `base-{component}.tsx` - Core component logic
- `index.tsx` - Exported wrapper with controller HOC
- `hook.ts` - Custom hooks where needed

**Available Components**:
- Avatar, Checkbox, Color Select, Date Picker, Email, License Plate
- OTP, Password, Phone, Select, Text Field, Terms Acceptance

### UI Components ([mobile-app/src/components/ui/](mdc:mobile-app/src/components/ui))
- Based on shadcn/ui patterns adapted for React Native
- Consistent styling with TailwindCSS classes

## üóÉÔ∏è Database Layer ([mobile-app/src/db/](mdc:mobile-app/src/db))
- **Schema**: [mobile-app/src/db/schema.ts](mdc:mobile-app/src/db/schema.ts) - Drizzle ORM schema
- **Connection**: [mobile-app/src/db/index.ts](mdc:mobile-app/src/db/index.ts) - Database setup
- **Seed**: [mobile-app/src/db/seed.ts](mdc:mobile-app/src/db/seed.ts) - Initial data

## ü™ù Custom Hooks ([mobile-app/src/hooks/](mdc:mobile-app/src/hooks))
- `use-api.ts` - API call abstractions
- `use-app-init.ts` - App initialization logic
- `use-color-scheme.ts` - Theme management
- `use-translation.ts` - Internationalization
- `use-image-picker.ts` - Image selection utilities

## üì± Screen Components ([mobile-app/src/screens/](mdc:mobile-app/src/screens))

### Onboarding ([mobile-app/src/screens/onboarding/](mdc:mobile-app/src/screens/onboarding))
- 3-slide introduction flow
- Welcome indicators and pager components

### Protected Screens ([mobile-app/src/screens/protected/](mdc:mobile-app/src/screens/protected))
- **Search**: License plate search and messaging
- **Inbox**: Received messages management
- **My Cars**: Vehicle registration and management
- **Account**: User profile and settings

### Unprotected Screens ([mobile-app/src/screens/unprotected/](mdc:mobile-app/src/screens/unprotected))
- Sign in/up flows with form validation
- Phone verification with OTP

## üè™ State Management ([mobile-app/src/stores/](mdc:mobile-app/src/stores))
Using Zustand for state management:
- `app.ts` - Global app state
- `programmatic-go-back.ts` - Navigation helpers

## üåç Internationalization ([mobile-app/src/translations/](mdc:mobile-app/src/translations))
- **Locales**: English, Romanian, Russian
- **Files**: [mobile-app/src/translations/locales/](mdc:mobile-app/src/translations/locales)
- **Types**: Type-safe translation keys

## üé® Styling Approach
- **Framework**: TailwindCSS with NativeWind
- **Config**: [mobile-app/tailwind.config.js](mdc:mobile-app/tailwind.config.js)
- **Global Styles**: [mobile-app/global.css](mdc:mobile-app/global.css)
- **Theme**: Support for light/dark modes

## üìã Form Validation
- **Library**: Zod for schema validation
- **Pattern**: React Hook Form + Zod resolver
- **Location**: Schema files in respective screen/form directories

## üîó Navigation Patterns
- **Router**: Expo Router (file-based)
- **Tabs**: Custom tab bar component
- **Guards**: Authentication-based route protection
- **Deep Linking**: Configured for external app links

## üöÄ Performance Optimizations
- **Images**: Optimized with Expo Image
- **Animations**: Lottie animations for engaging UX
- **Lazy Loading**: Components loaded on demand
- **Caching**: API responses cached appropriately
